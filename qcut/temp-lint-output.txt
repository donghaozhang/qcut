(node:18328) ExperimentalWarning: CommonJS module C:\Program Files\nodejs\node_modules\npm\node_modules\debug\src\node.js is loading ES Module C:\Program Files\nodejs\node_modules\npm\node_modules\supports-color\index.js using require().
Support for loading ES Module in require() is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
apps\web\src\components\editor\preview-panel.tsx:282:26 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook does not specify its dependency on getActiveElements.
  
    280 │   };
    281 │ 
  > 282 │   const activeElements = useMemo(() => {
        │                          ^^^^^^^
    283 │     const elements = getActiveElements();
    284 │     if (elements.length > 0 && mediaItems.length === 0) {
  
  i This dependency is being used here, but is not specified in the hook dependency list.
  
    282 │   const activeElements = useMemo(() => {
  > 283 │     const elements = getActiveElements();
        │                      ^^^^^^^^^^^^^^^^^
    284 │     if (elements.length > 0 && mediaItems.length === 0) {
    285 │       console.warn('[Preview] Active elements found but mediaItems is empty. Preview will show placeholder.');
  
  i Unsafe fix: Add the missing dependency to the list.
  
    288 │ ··},·[tracks,·currentTime,·mediaItems,·getActiveElements]);
        │                                      +++++++++++++++++++   

apps\web\src\components\editor\preview-panel.tsx:282:26 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: tracks, currentTime
  
    280 │   };
    281 │ 
  > 282 │   const activeElements = useMemo(() => {
        │                          ^^^^^^^
    283 │     const elements = getActiveElements();
    284 │     if (elements.length > 0 && mediaItems.length === 0) {
  
  i This dependency can be removed from the list.
  
    286 │     }
    287 │     return elements;
  > 288 │   }, [tracks, currentTime, mediaItems]);
        │       ^^^^^^
    289 │ 
  
  i This dependency can be removed from the list.
  
    286 │     }
    287 │     return elements;
  > 288 │   }, [tracks, currentTime, mediaItems]);
        │               ^^^^^^^^^^^
    289 │ 
  
  i Unsafe fix: Remove the extra dependencies from the list.
  
    288 │ ··},·[tracks,·currentTime,·mediaItems]);
        │       ---------------------             

apps\web\src\components\ui\video-player.tsx:117:3 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: src
  
    116 │   // Check video element dimensions on mount
  > 117 │   useEffect(() => {
        │   ^^^^^^^^^
    118 │     const video = videoRef.current;
    119 │     if (!video) return;
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    121 │     // Dimensions will be checked by video element itself
  > 122 │   }, [src]);
        │       ^^^
    123 │ 
    124 │   // Video source tracking
  
  i Unsafe fix: Remove the extra dependencies from the list.
  
    122 │ ··},·[src]);
        │       ---   

apps\web\src\components\ui\video-player.tsx:125:3 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: src
  
    124 │   // Video source tracking
  > 125 │   useEffect(() => {
        │   ^^^^^^^^^
    126 │     // Source changed - video will reinitialize
    127 │   }, [src]);
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    125 │   useEffect(() => {
    126 │     // Source changed - video will reinitialize
  > 127 │   }, [src]);
        │       ^^^
    128 │ 
    129 │   return (
  
  i Unsafe fix: Remove the extra dependencies from the list.
  
    127 │ ··},·[src]);
        │       ---   

apps\web\src\hooks\use-timeline-element-resize.ts:43:36 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook does not specify its dependency on element.mediaId.
  
    41 │   } = useTimelineStore();
    42 │ 
  > 43 │   const canExtendElementDuration = useCallback(() => {
       │                                    ^^^^^^^^^^^
    44 │     // Text elements can always be extended
    45 │     if (element.type === "text") {
  
  i This dependency is being used here, but is not specified in the hook dependency list.
  
    52 │       if (mediaItemsLoading) return false;
    53 │ 
  > 54 │       const mediaItem = mediaItems.find((item) => item.id === element.mediaId);
       │                                                               ^^^^^^^^^^^^^^^
    55 │       if (!mediaItem) return false;
    56 │ 
  
  i Unsafe fix: Add the missing dependency to the list.
  
     67  67 │       return false;
     68  68 │     }, [
     69     │ - ····element.type,
     70     │ - ····element.type·===·"media"·?·element.mediaId·:·null,
     71     │ - ····mediaItemsLoading,
     72     │ - ····mediaItems,
         69 │ + ····element.type,·
         70 │ + ····element.type·===·"media"·?·element.mediaId·:·null,·
         71 │ + ····mediaItemsLoading,·
         72 │ + ····mediaItems,·element.mediaId
     73  73 │     ]);
     74  74 │   
  

apps\web\src\hooks\use-timeline-element-resize.ts:43:36 lint/correctness/useExhaustiveDependencies  FIXABLE  ━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: element.type === "media" ? element.mediaId : null
  
    41 │   } = useTimelineStore();
    42 │ 
  > 43 │   const canExtendElementDuration = useCallback(() => {
       │                                    ^^^^^^^^^^^
    44 │     // Text elements can always be extended
    45 │     if (element.type === "text") {
  
  i This dependency can be removed from the list.
  
    68 │   }, [
    69 │     element.type,
  > 70 │     element.type === "media" ? element.mediaId : null,
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    71 │     mediaItemsLoading,
    72 │     mediaItems,
  
  i Unsafe fix: Remove the extra dependencies from the list.
  
     67  67 │       return false;
     68  68 │     }, [
     69     │ - ····element.type,
     70     │ - ····element.type·===·"media"·?·element.mediaId·:·null,
     71     │ - ····mediaItemsLoading,
     72     │ - ····mediaItems,
         69 │ + ····element.type,·
         70 │ + ····mediaItemsLoading,·
         71 │ + ····mediaItems
     73  72 │     ]);
     74  73 │   
  

apps\web\src\components\editor\media-panel\views\media.tsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     72  72 │   
     73  73 │     const processFiles = async (files: FileList | File[]) => {
     74     │ - ····console.log("[Media·View]·🚀·processFiles·called·with",·files?.length·||·0,·"files");
     75     │ - ····
         74 │ + ····console.log(
         75 │ + ······"[Media·View]·🚀·processFiles·called·with",
         76 │ + ······files?.length·||·0,
         77 │ + ······"files"
         78 │ + ····);
         79 │ + 
     76  80 │       if (!files || files.length === 0) {
     77  81 │         console.log("[Media View] ❌ No files provided");
    ······· │ 
     84  88 │       }
     85  89 │   
     86     │ - ····console.log("[Media·View]·▶�·Starting·upload·process·for·project:",·activeProject.id);
         90 │ + ····console.log(
         91 │ + ······"[Media·View]·▶�·Starting·upload·process·for·project:",
         92 │ + ······activeProject.id
         93 │ + ····);
     87  94 │       setIsProcessing(true);
     88  95 │       setProgress(0);
     89     │ - ····
         96 │ + 
     90  97 │       try {
     91  98 │         console.log("[Media View] 📋 File details:");
     92  99 │         Array.from(files).forEach((file, i) => {
     93     │ - ········console.log(`··${i·+·1}.·${file.name}·(${file.type},·${(file.size·/·1024·/·1024).toFixed(2)}·MB)`);
        100 │ + ········console.log(
        101 │ + ··········`··${i·+·1}.·${file.name}·(${file.type},·${(file.size·/·1024·/·1024).toFixed(2)}·MB)`
        102 │ + ········);
     94 103 │         });
     95     │ - ······
        104 │ + 
     96 105 │         // Process files (extract metadata, generate thumbnails, etc.)
     97 106 │         console.log("[Media View] 🔧 Calling processMediaFiles...");
    ······· │ 
    100 109 │           setProgress(p);
    101 110 │         });
    102     │ - ······
    103     │ - ······console.log("[Media·View]·✅·processMediaFiles·completed,·got",·processedItems.length,·"processed·items");
    104     │ - ······
        111 │ + 
        112 │ + ······console.log(
        113 │ + ········"[Media·View]·✅·processMediaFiles·completed,·got",
        114 │ + ········processedItems.length,
        115 │ + ········"processed·items"
        116 │ + ······);
        117 │ + 
    105 118 │         // Add each processed media item to the store
    106 119 │         console.log("[Media View] 💾 Adding items to media store...");
    107 120 │         for (const [index, item] of processedItems.entries()) {
    108     │ - ········console.log(`[Media·View]·➕·Adding·item·${index·+·1}/${processedItems.length}:`,·item.name);
        121 │ + ········console.log(
        122 │ + ··········`[Media·View]·➕·Adding·item·${index·+·1}/${processedItems.length}:`,
        123 │ + ··········item.name
        124 │ + ········);
    109 125 │           if (!addMediaItem) {
    110 126 │             throw new Error("Media store not ready");
    ······· │ 
    113 129 │           console.log(`[Media View] ✅ Item ${index + 1} added successfully`);
    114 130 │         }
    115     │ - ······
        131 │ + 
    116 132 │         console.log("[Media View] 🎉 Upload process completed successfully!");
    117 133 │         toast.success(`Successfully uploaded ${processedItems.length} file(s)`);
  

apps\web\src\components\editor\preview-panel.tsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
      78   78 │         } else {
      79   79 │           const container = containerRef.current.getBoundingClientRect();
      80      │ - ········
           80 │ + 
      81   81 │           const computedStyle = getComputedStyle(containerRef.current);
      82   82 │           const paddingTop = parseFloat(computedStyle.paddingTop);
    ········· │ 
      97   97 │             toolbarHeight -
      98   98 │             (toolbarHeight > 0 ? gap : 0);
      99      │ - ········
     100   99 │         }
     101  100 │   
    ········· │ 
     117  116 │       // Declare resizeObserver first to avoid temporal dead zone
     118  117 │       const resizeObserver = new ResizeObserver(updatePreviewSize);
     119      │ - ····
          118 │ + 
     120  119 │       updatePreviewSize();
     121      │ - ····
          120 │ + 
     122  121 │       // Retry size calculation if container wasn't ready initially
     123  122 │       if (!containerRef.current) {
    ········· │ 
     125  124 │           updatePreviewSize();
     126  125 │         }, 100);
     127      │ - ······
          126 │ + 
     128  127 │         // Return cleanup that only clears timeout (resizeObserver not connected yet)
     129  128 │         return () => {
    ········· │ 
     145  144 │       };
     146  145 │     }, [canvasSize.width, canvasSize.height, isExpanded]);
     147      │ - 
     148  146 │   
     149  147 │     useEffect(() => {
    ········· │ 
     283  281 │       const elements = getActiveElements();
     284  282 │       if (elements.length > 0 && mediaItems.length === 0) {
     285      │ - ······console.warn('[Preview]·Active·elements·found·but·mediaItems·is·empty.·Preview·will·show·placeholder.');
          283 │ + ······console.warn(
          284 │ + ········"[Preview]·Active·elements·found·but·mediaItems·is·empty.·Preview·will·show·placeholder."
          285 │ + ······);
     286  286 │       }
     287  287 │       return elements;
     288  288 │     }, [tracks, currentTime, mediaItems]);
     289      │ - 
     290  289 │   
     291  290 │     // Get media elements for blur background (video/image only)
    ········· │ 
     454  453 │               key={element.id}
     455  454 │               className="absolute inset-0 flex items-center justify-center"
     456      │ - ············style={{·
     457      │ - ··············width:·'100%',·
     458      │ - ··············height:·'100%'
          455 │ + ············style={{
          456 │ + ··············width:·"100%",
          457 │ + ··············height:·"100%",
     459  458 │               }}
     460  459 │             >
  

apps\web\src\components\ui\video-player.tsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    118 118 │       const video = videoRef.current;
    119 119 │       if (!video) return;
    120     │ - ····
        120 │ + 
    121 121 │       // Dimensions will be checked by video element itself
    122 122 │     }, [src]);
    ······· │ 
    138 138 │         disablePictureInPicture
    139 139 │         disableRemotePlayback
    140     │ - ······style={{·
        140 │ + ······style={{
    141 141 │           pointerEvents: "none",
    142 142 │           width: "100%",
    143     │ - ········height:·"100%"
        143 │ + ········height:·"100%",
    144 144 │         }}
    145 145 │         onContextMenu={(e) => e.preventDefault()}
    ······· │ 
    147 147 │           // Video metadata loaded
    148 148 │         }}
    149     │ - ······onError={(e)·=>·console.error('[VideoPlayer]·Video·error:',·e,·'src:',·src)}
        149 │ + ······onError={(e)·=>
        150 │ + ········console.error("[VideoPlayer]·Video·error:",·e,·"src:",·src)
        151 │ + ······}
    150 152 │         onCanPlay={() => {
    151 153 │           // Video ready to play
  

apps\web\src\lib\ffmpeg-loader.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    14 14 │     try {
    15 15 │       const ffmpegModule = await getFFmpeg();
    16    │ - ····
       16 │ + 
    17 17 │       if (!ffmpegModule || !ffmpegModule.FFmpeg) {
    18    │ - ······throw·new·Error("FFmpeg·module·failed·to·load·or·FFmpeg·class·not·available");
       18 │ + ······throw·new·Error(
       19 │ + ········"FFmpeg·module·failed·to·load·or·FFmpeg·class·not·available"
       20 │ + ······);
    19 21 │       }
    20    │ - ····
       22 │ + 
    21 23 │       const { FFmpeg } = ffmpegModule;
    22 24 │       const instance = new FFmpeg();
    23    │ - ····
       25 │ + 
    24 26 │       if (!instance) {
    25 27 │         throw new Error("FFmpeg constructor returned null/undefined");
    26 28 │       }
    27    │ - ····
       29 │ + 
    28 30 │       return instance;
    29 31 │     } catch (error) {
    30    │ - ····console.error("[FFmpeg·Loader]·❌·Failed·to·create·FFmpeg·instance:",·error);
       32 │ + ····console.error(
       33 │ + ······"[FFmpeg·Loader]·❌·Failed·to·create·FFmpeg·instance:",
       34 │ + ······error
       35 │ + ····);
    31 36 │       throw error;
    32 37 │     }
  

apps\web\src\lib\media-processing.ts:63:23 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    61 │         console.log(`[Media Processing] 🎥 Processing video: ${file.name}`);
    62 │         try {
  > 63 │           console.log(`[Media Processing] 🔧 Attempting FFmpeg video processing...`);
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    64 │           // Use FFmpeg for comprehensive video info extraction
    65 │           const videoInfo = await ffmpegUtils.getVideoInfo(file);
  
  i Safe fix: Replace with string literal
  
     61  61 │           console.log(`[Media Processing] 🎥 Processing video: ${file.name}`);
     62  62 │           try {
     63     │ - ··········console.log(`[Media·Processing]·🔧·Attempting·FFmpeg·video·processing...`);
         63 │ + ··········console.log("[Media·Processing]·🔧·Attempting·FFmpeg·video·processing...");
     64  64 │             // Use FFmpeg for comprehensive video info extraction
     65  65 │             const videoInfo = await ffmpegUtils.getVideoInfo(file);
  

apps\web\src\lib\media-processing.ts:66:23 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    64 │           // Use FFmpeg for comprehensive video info extraction
    65 │           const videoInfo = await ffmpegUtils.getVideoInfo(file);
  > 66 │           console.log(`[Media Processing] ✅ FFmpeg getVideoInfo successful:`, videoInfo);
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    67 │           duration = videoInfo.duration;
    68 │           width = videoInfo.width;
  
  i Safe fix: Replace with string literal
  
     64  64 │             // Use FFmpeg for comprehensive video info extraction
     65  65 │             const videoInfo = await ffmpegUtils.getVideoInfo(file);
     66     │ - ··········console.log(`[Media·Processing]·✅·FFmpeg·getVideoInfo·successful:`,·videoInfo);
         66 │ + ··········console.log("[Media·Processing]·✅·FFmpeg·getVideoInfo·successful:",·videoInfo);
     67  67 │             duration = videoInfo.duration;
     68  68 │             width = videoInfo.width;
  

apps\web\src\lib\media-processing.ts:72:23 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    70 │           fps = videoInfo.fps;
    71 │ 
  > 72 │           console.log(`[Media Processing] 🖼� Generating thumbnail with FFmpeg...`);
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    73 │           // Skip FFmpeg thumbnail generation if video dimensions are invalid
    74 │           if (width === 0 || height === 0) {
  
  i Safe fix: Replace with string literal
  
     70  70 │             fps = videoInfo.fps;
     71  71 │   
     72     │ - ··········console.log(`[Media·Processing]·🖼�·Generating·thumbnail·with·FFmpeg...`);
         72 │ + ··········console.log("[Media·Processing]·🖼�·Generating·thumbnail·with·FFmpeg...");
     73  73 │             // Skip FFmpeg thumbnail generation if video dimensions are invalid
     74  74 │             if (width === 0 || height === 0) {
  

apps\web\src\lib\media-processing.ts:80:23 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    78 │           // Generate thumbnail using FFmpeg
    79 │           thumbnailUrl = await ffmpegUtils.generateThumbnail(file, 1);
  > 80 │           console.log(`[Media Processing] ✅ FFmpeg thumbnail generated:`, thumbnailUrl ? 'SUCCESS' : 'FAILED');
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    81 │         } catch (error) {
    82 │           console.warn(
  
  i Safe fix: Replace with string literal
  
     78  78 │             // Generate thumbnail using FFmpeg
     79  79 │             thumbnailUrl = await ffmpegUtils.generateThumbnail(file, 1);
     80     │ - ··········console.log(`[Media·Processing]·✅·FFmpeg·thumbnail·generated:`,·thumbnailUrl·?·'SUCCESS'·:·'FAILED');
         80 │ + ··········console.log("[Media·Processing]·✅·FFmpeg·thumbnail·generated:",·thumbnailUrl·?·'SUCCESS'·:·'FAILED');
     81  81 │           } catch (error) {
     82  82 │             console.warn(
  

apps\web\src\lib\media-processing.ts:89:25 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    87 │           // Enhanced fallback processing with better error handling
    88 │           try {
  > 89 │             console.log(`[Media Processing] 🌐 Attempting browser fallback processing...`);
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    90 │             const videoResult = await mediaUtils.generateVideoThumbnail(file);
    91 │             console.log(`[Media Processing] ✅ Browser thumbnail generated:`, videoResult);
  
  i Safe fix: Replace with string literal
  
     87  87 │             // Enhanced fallback processing with better error handling
     88  88 │             try {
     89     │ - ············console.log(`[Media·Processing]·🌐·Attempting·browser·fallback·processing...`);
         89 │ + ············console.log("[Media·Processing]·🌐·Attempting·browser·fallback·processing...");
     90  90 │               const videoResult = await mediaUtils.generateVideoThumbnail(file);
     91  91 │               console.log(`[Media Processing] ✅ Browser thumbnail generated:`, videoResult);
  

apps\web\src\lib\media-processing.ts:91:25 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    89 │             console.log(`[Media Processing] 🌐 Attempting browser fallback processing...`);
    90 │             const videoResult = await mediaUtils.generateVideoThumbnail(file);
  > 91 │             console.log(`[Media Processing] ✅ Browser thumbnail generated:`, videoResult);
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    92 │             thumbnailUrl = videoResult.thumbnailUrl;
    93 │             width = videoResult.width;
  
  i Safe fix: Replace with string literal
  
     89  89 │               console.log(`[Media Processing] 🌐 Attempting browser fallback processing...`);
     90  90 │               const videoResult = await mediaUtils.generateVideoThumbnail(file);
     91     │ - ············console.log(`[Media·Processing]·✅·Browser·thumbnail·generated:`,·videoResult);
         91 │ + ············console.log("[Media·Processing]·✅·Browser·thumbnail·generated:",·videoResult);
     92  92 │               thumbnailUrl = videoResult.thumbnailUrl;
     93  93 │               width = videoResult.width;
  

apps\web\src\lib\media-processing.ts:96:25 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    94 │             height = videoResult.height;
    95 │             
  > 96 │             console.log(`[Media Processing] ⏱� Getting video duration...`);
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    97 │             duration = await mediaUtils.getMediaDuration(file);
    98 │             console.log(`[Media Processing] ✅ Duration extracted:`, duration);
  
  i Safe fix: Replace with string literal
  
     94  94 │               height = videoResult.height;
     95  95 │               
     96     │ - ············console.log(`[Media·Processing]·⏱�·Getting·video·duration...`);
         96 │ + ············console.log("[Media·Processing]·⏱�·Getting·video·duration...");
     97  97 │               duration = await mediaUtils.getMediaDuration(file);
     98  98 │               console.log(`[Media Processing] ✅ Duration extracted:`, duration);
  

apps\web\src\lib\media-processing.ts:98:25 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
     96 │             console.log(`[Media Processing] ⏱� Getting video duration...`);
     97 │             duration = await mediaUtils.getMediaDuration(file);
   > 98 │             console.log(`[Media Processing] ✅ Duration extracted:`, duration);
        │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     99 │             // FPS will remain undefined for fallback
    100 │             console.log("[Media Processing] ✅ Browser fallback processing successful");
  
  i Safe fix: Replace with string literal
  
     96  96 │               console.log(`[Media Processing] ⏱� Getting video duration...`);
     97  97 │               duration = await mediaUtils.getMediaDuration(file);
     98     │ - ············console.log(`[Media·Processing]·✅·Duration·extracted:`,·duration);
         98 │ + ············console.log("[Media·Processing]·✅·Duration·extracted:",·duration);
     99  99 │               // FPS will remain undefined for fallback
    100 100 │               console.log("[Media Processing] ✅ Browser fallback processing successful");
  

apps\web\src\lib\media-processing.ts:127:21 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    125 │         // For audio, we don't set width/height/fps (they'll be undefined)
    126 │         duration = await mediaUtils.getMediaDuration(file);
  > 127 │         console.log(`[Media Processing] ✅ Audio duration extracted:`, duration);
        │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    128 │       }
    129 │ 
  
  i Safe fix: Replace with string literal
  
    125 125 │           // For audio, we don't set width/height/fps (they'll be undefined)
    126 126 │           duration = await mediaUtils.getMediaDuration(file);
    127     │ - ········console.log(`[Media·Processing]·✅·Audio·duration·extracted:`,·duration);
        127 │ + ········console.log("[Media·Processing]·✅·Audio·duration·extracted:",·duration);
    128 128 │         }
    129 129 │   
  

apps\web\src\lib\media-processing.ts:142:19 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    140 │       };
    141 │       
  > 142 │       console.log(`[Media Processing] ➕ Adding processed item:`, {
        │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    143 │         name: processedItem.name,
    144 │         type: processedItem.type,
  
  i Safe fix: Replace with string literal
  
    140 140 │         };
    141 141 │         
    142     │ - ······console.log(`[Media·Processing]·➕·Adding·processed·item:`,·{
        142 │ + ······console.log("[Media·Processing]·➕·Adding·processed·item:",·{
    143 143 │           name: processedItem.name,
    144 144 │           type: processedItem.type,
  

The number of diagnostics exceeds the limit allowed. Use --max-diagnostics to increase it.
Diagnostics not shown: 10.
Checked 229 files in 448ms. No fixes applied.
Found 24 errors.
Found 6 warnings.
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

